openapi: 3.0.3
info:
  title: Swagger Ideia Original - OpenAPI 3.0
  description: |-
    Este é o contrato que representa as api's do nosso software Ideia Original
    
    Autores:
    - [Abdel Galeb](https://www.linkedin.com/in/abdel-galeb/)
    - [Filipe Genu Brito](https://www.linkedin.com/in/filipeg77/)
    - [github](https://github.com/Hajadalaj/arch_software_distributed-apis_and_web_services)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://ideiaoriginal.net/v1
tags:
  - name: Usuário
    description: Tudo sobre o usuario
  - name: Cliente
    description: Tudo sobre o cliente
  - name: Prestador
    description: Tudo sobre o prestador
  - name: Serviço
    description: Tipo de serviço prestado ou que pode ser contratado.
paths:
  /coringa:
    put:
      tags:
        - coringa
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - coringa
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /coringa/findByStatus:
    get:
      tags:
        - coringa
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /coringa/findByTags:
    get:
      tags:
        - coringa
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /coringa/{petId}:
    get:
      tags:
        - coringa
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - coringa
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - coringa
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /coringa/{petId}/uploadImage:
    post:
      tags:
        - coringa
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /servico/inventory:
    get:
      tags:
        - Serviço
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /servico/order:
    post:
      tags:
        - Serviço
      summary: Place an order for a pet
      description: Place a new order in the servico
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /usuario:
    post:
      tags:
        - Usuário
      summary: Cria uma conta de usuario
      description: Cria uma conta de usuario
      operationId: cadastrarUsuario
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/usuario'
      responses:
        '201':
          description: Operação concluída com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/usuario'
        default:
          description: Operação concluída com sucesso
  /usuario/login:
    get:
      tags:
        - Usuário
      summary: Efetua o login do usuario
      description: ''
      operationId: loginUsuario
      parameters:
        - name: nomeUsuario
          in: query
          description: Nome de usuario para login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Senha do usuario para login
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Operação concluída com sucesso
          headers:
            X-Rate-Limit:
              description: Chamada por hora permitida pelo usuario
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Data em UTC quando o token expira
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Nome ou senha invalido
  /usuario/logout:
    get:
      tags:
        - Usuário
      summary: Efetuar o logout do usuario
      description: ''
      operationId: logoutUsuario
      parameters: []
      responses:
        default:
          description: Operação concluída com sucesso
  /usuario/{codUsuario}:
    get:
      tags:
        - Usuário
      summary: Mostra informações de usuario
      description: Mostra informações de usuario
      operationId: mostrarUsuario
      parameters:
        - name: codUsuario
          in: path
          description: Código o usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operação concluída com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/usuario'
        '400':
          description: Codigo de usuario invalido
        '404':
          description: Codigo não encontrado
    put:
      tags:
        - Usuário
      summary: Atualiza informações de usuario
      description: Atualiza informações de usuario
      operationId: atualizarUsuario
      parameters:
        - name: codUsuario
          in: path
          description: Codigo de usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Operação concluída com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/usuario'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - Usuário
      summary: Excluir usuario
      description: Excluir usuario
      operationId: excluirUsuario
      parameters:
        - name: codUsuario
          in: path
          description: código de usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Código de usuario invalido
        '404':
          description: Codigo de usuario nao encontrado
  /cliente/codUsuario/{codUsuario}/meioDePagamento:
    post:
      tags:
        - Cliente
      summary: Cadastra um meio de pagamento para o cliente
      description: Cadastra um meio de pagamento para o cliente
      operationId: cadastrarMeioDePagamento
      requestBody:
        description: Cadastrar meio de pagamento
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cliente'
          application/xml:
            schema:
              $ref: '#/components/schemas/cliente'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/cliente'
      responses:
        default:
          description: Operação concluida com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cliente'
            application/xml:
              schema:
                $ref: '#/components/schemas/cliente'
    get:
      tags:
        - Cliente
      summary: Mostrar meios de pagamento do cliente
      description: ''
      operationId: mostrarMeiosDePagamento
      parameters:
        - name: codUsuario
          in: path
          description: Código do usuário
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operação concluída com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cliente'          
            application/xml:
              schema:
                $ref: '#/components/schemas/cliente'
        '400':
          description: Código de cliente inválido
        '404':
          description: Código de cliente não encontrado
    put:
      tags:
        - Cliente
      summary: Atualizar meio de pagamento
      description: Atualizar meio de pagamento
      operationId: atualizarMeioDePagamento
      parameters:
        - name: codUsuario
          in: path
          description: Código de cliente
          required: true
          schema:
            type: string
      requestBody:
        description: Atualiza o meio de pagamento do cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cliente'
          application/xml:
            schema:
              $ref: '#/components/schemas/cliente'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/cliente'
      responses:
        default:
          description: Operação concluída com sucesso
    delete:
      tags:
        - Cliente
      summary: Excluir meio de pagamento do cliente
      description: Excluir meio de pagamento do cliente
      operationId: excluirMeioDePagamento
      parameters:
        - name: codUsuario
          in: path
          description: Codigo do cliente
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Código de usuário inválido
        '404':
          description: Código de usuário não encontrado
  /prestador:
    post:
      tags:
        - Prestador
      summary: Create prestador
      description: This can only be done by the logged in prestador.
      operationId: createprestador
      requestBody:
        description: Created prestador object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prestador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prestador'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Prestador'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Prestador'
  /prestador/createWithList:
    post:
      tags:
        - Prestador
      summary: Creates list of prestadors with given input array
      description: Creates list of prestadors with given input array
      operationId: createprestadorsWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Prestador'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestador'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Prestador'
        default:
          description: successful operation
  /prestador/login:
    get:
      tags:
        - Prestador
      summary: Logs prestador into the system
      description: ''
      operationId: loginprestador
      parameters:
        - name: prestadorname
          in: query
          description: The prestador name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the prestador
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid prestadorname/password supplied
  /prestador/logout:
    get:
      tags:
        - Prestador
      summary: Logs out current logged in prestador session
      description: ''
      operationId: logoutprestador
      parameters: []
      responses:
        default:
          description: successful operation
  /prestador/{prestadorname}:
    get:
      tags:
        - Prestador
      summary: Get prestador by prestador name
      description: ''
      operationId: getprestadorByName
      parameters:
        - name: prestadorname
          in: path
          description: 'The name that needs to be fetched. Use prestador1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prestador'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Prestador'
        '400':
          description: Invalid prestadorname supplied
        '404':
          description: prestador not found
    put:
      tags:
        - Prestador
      summary: Update prestador
      description: This can only be done by the logged in prestador.
      operationId: updateprestador
      parameters:
        - name: prestadorname
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent prestador in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prestador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Prestador'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Prestador'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - Prestador
      summary: Delete prestador
      description: This can only be done by the logged in prestador.
      operationId: deleteprestador
      parameters:
        - name: prestadorname
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid prestadorname supplied
        '404':
          description: prestador not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        clientename:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    usuario:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        clientename:
          type: string
          example: thecliente
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        clienteStatus:
          type: integer
          description: cliente Status
          format: int32
          example: 1
      xml:
        name: cliente
    cliente:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        clientename:
          type: string
          example: thecliente
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        clienteStatus:
          type: integer
          description: cliente Status
          format: int32
          example: 1
      xml:
        name: cliente
    Prestador:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        clientename:
          type: string
          example: thecliente
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        clienteStatus:
          type: integer
          description: cliente Status
          format: int32
          example: 1
      xml:
        name: cliente
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    clienteArray:
      description: List of cliente object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/cliente'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header